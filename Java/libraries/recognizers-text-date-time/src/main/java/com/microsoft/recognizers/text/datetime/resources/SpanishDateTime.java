// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.microsoft.recognizers.text.datetime.resources;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.common.collect.ImmutableMap;

public class SpanishDateTime {

    public static final String TillRegex = "(?<till>hasta|al|a|--|-|—|——)(\\s+(el|la(s)?))?";

    public static final String AndRegex = "(?<and>y|y\\s*el|--|-|—|——)";

    public static final String DayRegex = "(?<day>01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|1|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)(?=\\b|t)";

    public static final String MonthNumRegex = "(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\b";

    public static final String YearRegex = "(?<year>((1[5-9]|20)\\d{2})|[0-27-9]\\d)";

    public static final String FullYearRegex = "\\b(?<year>19\\d{2}|20\\d{2})\\b";

    public static final String RelativeMonthRegex = "(?<relmonth>(este|pr[oó]ximo|[uú]ltimo)\\s+mes)\\b";

    public static final String MonthRegex = "(?<month>Abril|Abr|Agosto|Ago|Diciembre|Dic|Febrero|Feb|Enero|Ene|Julio|Jul|Junio|Jun|Marzo|Mar|Mayo|May|Noviembre|Nov|Octubre|Oct|Septiembre|Setiembre|Sept|Set)";

    public static final String MonthSuffixRegex = "(?<msuf>(en\\s+|del\\s+|de\\s+)?({RelativeMonthRegex}|{MonthRegex}))"
            .replace("{RelativeMonthRegex}", RelativeMonthRegex)
            .replace("{MonthRegex}", MonthRegex);

    public static final String DateUnitRegex = "(?<unit>años|año|meses|mes|semanas|semana|d[ií]a(s)?)\\b";

    public static final String PastRegex = "(?<past>\\b(pasad(a|o)(s)?|[uú]ltim[oa](s)?|anterior(es)?|previo(s)?)\\b)";

    public static final String FutureRegex = "(?<past>\\b(siguiente(s)?|pr[oó]xim[oa](s)?|dentro\\s+de|en)\\b)";

    public static final String SimpleCasesRegex = "\\b((desde\\s+el|desde|del)\\s+)?({DayRegex})\\s*{TillRegex}\\s*({DayRegex})\\s+{MonthSuffixRegex}((\\s+|\\s*,\\s*){FullYearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{TillRegex}", TillRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String MonthFrontSimpleCasesRegex = "\\b{MonthSuffixRegex}\\s+((desde\\s+el|desde|del)\\s+)?({DayRegex})\\s*{TillRegex}\\s*({DayRegex})((\\s+|\\s*,\\s*){FullYearRegex})?\\b"
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{TillRegex}", TillRegex)
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String MonthFrontBetweenRegex = "\\b{MonthSuffixRegex}\\s+((entre|entre\\s+el)\\s+)({DayRegex})\\s*{AndRegex}\\s*({DayRegex})((\\s+|\\s*,\\s*){FullYearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{AndRegex}", AndRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String DayBetweenRegex = "\\b((entre|entre\\s+el)\\s+)({DayRegex})\\s*{AndRegex}\\s*({DayRegex})\\s+{MonthSuffixRegex}((\\s+|\\s*,\\s*){FullYearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{AndRegex}", AndRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String OneWordPeriodRegex = "\\b(((pr[oó]xim[oa]?|est[ea]|[uú]ltim[oa]?|en)\\s+)?(?<month>Abril|Abr|Agosto|Ago|Diciembre|Dic|Enero|Ene|Febrero|Feb|Julio|Jul|Junio|Jun|Marzo|Mar|Mayo|May|Noviembre|Nov|Octubre|Oct|Septiembre|Setiembre|Sept|Set)|(?<=\\b(del|de la|el|la)\\s+)?(pr[oó]xim[oa](s)?|[uú]ltim[oa]?|est(e|a))\\s+(fin de semana|semana|mes|año)|fin de semana|(mes|años)? a la fecha)\\b";

    public static final String MonthWithYearRegex = "\\b(((pr[oó]xim[oa](s)?|este|esta|[uú]ltim[oa]?|en)\\s+)?(?<month>Abril|Abr|Agosto|Ago|Diciembre|Dic|Enero|Ene|Febrero|Feb|Julio|Jul|Junio|Jun|Marzo|Mar|Mayo|May|Noviembre|Nov|Octubre|Oct|Septiembre|Setiembre|Sept|Set)\\s+((de|del|de la)\\s+)?({FullYearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|este)\\s+año))\\b"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String MonthNumWithYearRegex = "({FullYearRegex}(\\s*?)[/\\-\\.](\\s*?){MonthNumRegex})|({MonthNumRegex}(\\s*?)[/\\-](\\s*?){FullYearRegex})"
            .replace("{FullYearRegex}", FullYearRegex)
            .replace("{MonthNumRegex}", MonthNumRegex);

    public static final String WeekOfMonthRegex = "(?<wom>(la\\s+)?(?<cardinal>primera?|1ra|segunda|2da|tercera?|3ra|cuarta|4ta|quinta|5ta|[uú]ltima)\\s+semana\\s+{MonthSuffixRegex})"
            .replace("{MonthSuffixRegex}", MonthSuffixRegex);

    public static final String WeekOfYearRegex = "(?<woy>(la\\s+)?(?<cardinal>primera?|1ra|segunda|2da|tercera?|3ra|cuarta|4ta|quinta|5ta|[uú]ltima?)\\s+semana(\\s+del?)?\\s+({FullYearRegex}|(?<order>pr[oó]ximo|[uú]ltimo|este)\\s+año))"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String FollowedDateUnit = "^\\s*{DateUnitRegex}"
            .replace("{DateUnitRegex}", DateUnitRegex);

    public static final String NumberCombinedWithDateUnit = "\\b(?<num>\\d+(\\.\\d*)?){DateUnitRegex}"
            .replace("{DateUnitRegex}", DateUnitRegex);

    public static final String QuarterRegex = "(el\\s+)?(?<cardinal>primer|1er|segundo|2do|tercer|3ro|cuarto|4to)\\s+cuatrimestre(\\s+de|\\s*,\\s*)?\\s+({FullYearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|este)\\s+año)"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String QuarterRegexYearFront = "({FullYearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|este)\\s+año)\\s+(el\\s+)?(?<cardinal>(primer|primero)|1er|segundo|2do|(tercer|terceo)|3ro|cuarto|4to)\\s+cuatrimestre"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String AllHalfYearRegex = "^[.]";

    public static final String PrefixDayRegex = "^[.]";

    public static final String CenturySuffixRegex = "^[.]";

    public static final String SeasonRegex = "\\b(?<season>(([uú]ltim[oa]|est[ea]|el|la|(pr[oó]xim[oa]s?|siguiente))\\s+)?(?<seas>primavera|verano|otoño|invierno)((\\s+del?|\\s*,\\s*)?\\s+({FullYearRegex}|(?<order>pr[oó]ximo|[uú]ltimo|este)\\s+año))?)\\b"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String WhichWeekRegex = "(semana)(\\s*)(?<number>\\d\\d|\\d|0\\d)";

    public static final String WeekOfRegex = "(semana)(\\s*)((do|da|de))";

    public static final String MonthOfRegex = "(mes)(\\s*)((do|da|de))";

    public static final String RangeUnitRegex = "\\b(?<unit>años|año|meses|mes|semanas|semana)\\b";

    public static final String InConnectorRegex = "\\b(in)\\b";

    public static final String WithinNextPrefixRegex = "^[.]";

    public static final String FromRegex = "((desde|de)(\\s*la(s)?)?)$";

    public static final String ConnectorAndRegex = "(y\\s*(la(s)?)?)$";

    public static final String BetweenRegex = "(entre\\s*(la(s)?)?)";

    public static final String WeekDayRegex = "\\b(?<weekday>Domingos?|Lunes|Martes|Mi[eé]rcoles|Jueves|Viernes|S[aá]bados?|Lu|Ma|Mi|Ju|Vi|Sa|Do)\\b";

    public static final String OnRegex = "(?<=\\ben\\s+)({DayRegex}s?)\\b"
            .replace("{DayRegex}", DayRegex);

    public static final String RelaxedOnRegex = "(?<=\\b(en|el|del)\\s+)((?<day>10|11|12|13|14|15|16|17|18|19|1st|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)s?)\\b";

    public static final String ThisRegex = "\\b((este\\s*){WeekDayRegex})|({WeekDayRegex}\\s*((de\\s+)?esta\\s+semana))\\b"
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String LastDateRegex = "\\b(([uú]ltimo)\\s*{WeekDayRegex})|({WeekDayRegex}(\\s+((de\\s+)?(esta|la)\\s+([uú]ltima\\s+)?semana)))\\b"
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String NextDateRegex = "\\b(((pr[oó]ximo|siguiente)\\s*){WeekDayRegex})|({WeekDayRegex}(\\s+(de\\s+)?(la\\s+)?(pr[oó]xima|siguiente)(\\s*semana)))\\b"
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String SpecialDayRegex = "\\b((el\\s+)?(d[ií]a\\s+antes\\s+de\\s+ayer|anteayer)|((el\\s+)?d[ií]a\\s+(despu[eé]s\\s+)?de\\s+mañana|pasado\\s+mañana)|(el\\s)?d[ií]a siguiente|(el\\s)?pr[oó]ximo\\s+d[ií]a|(el\\s+)?[uú]ltimo d[ií]a|(d)?el d[ií]a|ayer|mañana|hoy)\\b";

    public static final String SpecialDayWithNumRegex = "^[.]";

    public static final String ForTheRegex = "^[.]";

    public static final String WeekDayAndDayOfMonthRegex = "^[.]";

    public static final String WeekDayOfMonthRegex = "(?<wom>(el\\s+)?(?<cardinal>primer|1er|segundo|2do|tercer|3er|cuarto|4to|quinto|5to|[uú]ltimo)\\s+{WeekDayRegex}\\s+{MonthSuffixRegex})"
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex);

    public static final String RelativeWeekDayRegex = "^[.]";

    public static final String NumberEndingPattern = "^[.]";

    public static final String SpecialDateRegex = "(?<=\\b(en)\\s+el\\s+){DayRegex}\\b"
            .replace("{DayRegex}", DayRegex);

    public static final String OfMonthRegex = "^\\s*de\\s*{MonthSuffixRegex}"
            .replace("{MonthSuffixRegex}", MonthSuffixRegex);

    public static final String MonthEndRegex = "({MonthRegex}\\s*(el)?\\s*$)"
            .replace("{MonthRegex}", MonthRegex);

    public static final String WeekDayEnd = "{WeekDayRegex}\\s*,?\\s*$"
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String DateExtractor1 = "\\b({WeekDayRegex}(\\s+|\\s*,\\s*))?{DayRegex}?((\\s*(de)|[/\\\\\\.\\-])\\s*)?{MonthRegex}\\b"
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthRegex}", MonthRegex);

    public static final String DateExtractor2 = "\\b({WeekDayRegex}(\\s+|\\s*,\\s*))?{DayRegex}\\s*([\\.\\-]|de)?\\s*{MonthRegex}?(\\s*,\\s*|\\s*(del?)\\s*){YearRegex}\\b"
            .replace("{MonthRegex}", MonthRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{YearRegex}", YearRegex)
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String DateExtractor3 = "\\b({WeekDayRegex}(\\s+|\\s*,\\s*))?{DayRegex}(\\s+|\\s*,\\s*|\\s+de\\s+|\\s*-\\s*){MonthRegex}((\\s+|\\s*,\\s*){YearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthRegex}", MonthRegex)
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String DateExtractor4 = "\\b{MonthNumRegex}\\s*[/\\\\\\-]\\s*{DayRegex}\\s*[/\\\\\\-]\\s*{YearRegex}"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String DateExtractor5 = "\\b{DayRegex}\\s*[/\\\\\\-\\.]\\s*{MonthNumRegex}\\s*[/\\\\\\-\\.]\\s*{YearRegex}"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String DateExtractor6 = "(?<=\\b(en|el)\\s+){MonthNumRegex}[\\-\\.]{DayRegex}\\b"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex);

    public static final String DateExtractor7 = "\\b{MonthNumRegex}\\s*/\\s*{DayRegex}((\\s+|\\s*,\\s*|\\s+de\\s+){YearRegex})?\\b"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String DateExtractor8 = "(?<=\\b(en|el)\\s+){DayRegex}[\\\\\\-]{MonthNumRegex}\\b"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex);

    public static final String DateExtractor9 = "\\b{DayRegex}\\s*/\\s*{MonthNumRegex}((\\s+|\\s*,\\s*|\\s+de\\s+){YearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String DateExtractor10 = "\\b{YearRegex}\\s*[/\\\\\\-\\.]\\s*{MonthNumRegex}\\s*[/\\\\\\-\\.]\\s*{DayRegex}"
            .replace("{YearRegex}", YearRegex)
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex);

    public static final String HourNumRegex = "\\b(?<hournum>cero|una|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce)\\b";

    public static final String DescRegex = "(?<desc>pm\\b|am\\b|p\\.m\\.|a\\.m\\.)";

    public static final String AmDescRegex = "(am\\b|a\\.m\\.|a m\\b|a\\. m\\.\\b|a\\.m\\b|a\\. m\\b)";

    public static final String PmDescRegex = "(pm\\b|p\\.m\\.|p\\b|p m\\b|p\\. m\\.\\b|p\\.m\\b|p\\. m\\b)";

    public static final String AmPmDescRegex = "(ampm)";

    public static final String MinuteNumRegex = "(?<minnum>un|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|dieciseis|diecisiete|dieciocho|diecinueve|veinte|treinta|cuarenta|cincuenta)";

    public static final String DeltaMinuteNumRegex = "(?<deltaminnum>un|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|dieciseis|diecisiete|dieciocho|diecinueve|veinte|treinta|cuarenta|cincuenta)";

    public static final String OclockRegex = "(?<oclock>en\\s+punto)";

    public static final String PmRegex = "(?<pm>((por|de|a|en)\\s+la)\\s+(tarde|noche))";

    public static final String AmRegex = "(?<am>((por|de|a|en)\\s+la)\\s+(mañana|madrugada))";

    public static final String AmTimeRegex = "(?<am>(esta|(por|de|a|en)\\s+la)\\s+(mañana|madrugada))";

    public static final String PmTimeRegex = "(?<pm>(esta|(por|de|a|en)\\s+la)\\s+(tarde|noche))";

    public static final String LessThanOneHour = "(?<lth>((\\s+y\\s+)?cuarto|(\\s*)menos cuarto|(\\s+y\\s+)media|{BaseDateTime.DeltaMinuteRegex}(\\s+(minuto|minutos|min|mins))|{DeltaMinuteNumRegex}(\\s+(minuto|minutos|min|mins))))"
            .replace("{BaseDateTime.DeltaMinuteRegex}", BaseDateTime.DeltaMinuteRegex)
            .replace("{DeltaMinuteNumRegex}", DeltaMinuteNumRegex);

    public static final String TensTimeRegex = "(?<tens>diez|veint(i|e)|treinta|cuarenta|cincuenta)";

    public static final String WrittenTimeRegex = "(?<writtentime>{HourNumRegex}\\s*((y|menos)\\s+)?({MinuteNumRegex}|({TensTimeRegex}((\\s*y\\s+)?{MinuteNumRegex})?)))"
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{MinuteNumRegex}", MinuteNumRegex)
            .replace("{TensTimeRegex}", TensTimeRegex);

    public static final String TimePrefix = "(?<prefix>{LessThanOneHour}(\\s+(pasad[ao]s)\\s+(de\\s+las|las)?|\\s+(para|antes\\s+de)?\\s+(las?))?)"
            .replace("{LessThanOneHour}", LessThanOneHour);

    public static final String TimeSuffix = "(?<suffix>({LessThanOneHour}\\s+)?({AmRegex}|{PmRegex}|{OclockRegex}))"
            .replace("{LessThanOneHour}", LessThanOneHour)
            .replace("{AmRegex}", AmRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{OclockRegex}", OclockRegex);

    public static final String BasicTime = "(?<basictime>{WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}:{BaseDateTime.MinuteRegex}(:{BaseDateTime.SecondRegex})?|{BaseDateTime.HourRegex})"
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{BaseDateTime.SecondRegex}", BaseDateTime.SecondRegex);

    public static final String AtRegex = "\\b(?<=\\b(a las?)\\s+)({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex})\\b"
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{WrittenTimeRegex}", WrittenTimeRegex);

    public static final String ConnectNumRegex = "({BaseDateTime.HourRegex}(?<min>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59)\\s*{DescRegex})"
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex1 = "(\\b{TimePrefix}\\s+)?({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex})\\s*({DescRegex})"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex2 = "(\\b{TimePrefix}\\s+)?(T)?{BaseDateTime.HourRegex}(\\s*)?:(\\s*)?{BaseDateTime.MinuteRegex}((\\s*)?:(\\s*)?{BaseDateTime.SecondRegex})?((\\s*{DescRegex})|\\b)"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{BaseDateTime.SecondRegex}", BaseDateTime.SecondRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex3 = "(\\b{TimePrefix}\\s+)?{BaseDateTime.HourRegex}\\.{BaseDateTime.MinuteRegex}(\\s*{DescRegex})"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex4 = "\\b(({DescRegex}?)|({BasicTime}?)({DescRegex}?))({TimePrefix}\\s*)({HourNumRegex}|{BaseDateTime.HourRegex})?(\\s+{TensTimeRegex}(\\s+y\\s+)?{MinuteNumRegex}?)?({OclockRegex})?\\b"
            .replace("{DescRegex}", DescRegex)
            .replace("{BasicTime}", BasicTime)
            .replace("{TimePrefix}", TimePrefix)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{TensTimeRegex}", TensTimeRegex)
            .replace("{MinuteNumRegex}", MinuteNumRegex)
            .replace("{OclockRegex}", OclockRegex);

    public static final String TimeRegex5 = "\\b({TimePrefix}|{BasicTime}{TimePrefix})\\s+(\\s*{DescRegex})?{BasicTime}?\\s*{TimeSuffix}\\b"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex)
            .replace("{TimeSuffix}", TimeSuffix);

    public static final String TimeRegex6 = "({BasicTime}(\\s*{DescRegex})?\\s+{TimeSuffix}\\b)"
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex)
            .replace("{TimeSuffix}", TimeSuffix);

    public static final String TimeRegex7 = "\\b{TimeSuffix}\\s+a\\s+las\\s+{BasicTime}((\\s*{DescRegex})|\\b)"
            .replace("{TimeSuffix}", TimeSuffix)
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex8 = "\\b{TimeSuffix}\\s+{BasicTime}((\\s*{DescRegex})|\\b)"
            .replace("{TimeSuffix}", TimeSuffix)
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex9 = "\\b(?<writtentime>{HourNumRegex}\\s+({TensTimeRegex}\\s*)?(y\\s+)?{MinuteNumRegex}?)\\b"
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{TensTimeRegex}", TensTimeRegex)
            .replace("{MinuteNumRegex}", MinuteNumRegex);

    public static final String TimeRegex10 = "(a\\s+la|al)\\s+(madrugada|mañana|medio\\s*d[ií]a|tarde|noche)";

    public static final String TimeRegex11 = "\\b({WrittenTimeRegex})({DescRegex}?)\\b"
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex12 = "(\\b{TimePrefix}\\s+)?{BaseDateTime.HourRegex}(\\s*h\\s*){BaseDateTime.MinuteRegex}(\\s*{DescRegex})?"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String PrepositionRegex = "(?<prep>(a(l)?|en|de(l)?)?(\\s*(la(s)?|el|los))?$)";

    public static final String NowRegex = "\\b(?<now>(justo\\s+)?ahora(\\s+mismo)?|en\\s+este\\s+momento|tan\\s+pronto\\s+como\\s+sea\\s+posible|tan\\s+pronto\\s+como\\s+(pueda|puedas|podamos|puedan)|lo\\s+m[aá]s\\s+pronto\\s+posible|recientemente|previamente)\\b";

    public static final String SuffixRegex = "^\\s*(((y|a|en|por)\\s+la|al)\\s+)?(mañana|madrugada|medio\\s*d[ií]a|tarde|noche)\\b";

    public static final String TimeOfDayRegex = "\\b(?<timeOfDay>mañana|madrugada|(pasado\\s+(el\\s+)?)?medio\\s?d[ií]a|tarde|noche|anoche)\\b";

    public static final String SpecificTimeOfDayRegex = "\\b(((((a)?\\s+la|esta|siguiente|pr[oó]xim[oa]|[uú]ltim[oa])\\s+)?{TimeOfDayRegex}))\\b"
            .replace("{TimeOfDayRegex}", TimeOfDayRegex);

    public static final String TimeOfTodayAfterRegex = "^\\s*(,\\s*)?(en|de(l)?\\s+)?{SpecificTimeOfDayRegex}"
            .replace("{SpecificTimeOfDayRegex}", SpecificTimeOfDayRegex);

    public static final String TimeOfTodayBeforeRegex = "({SpecificTimeOfDayRegex}(\\s*,)?(\\s+(a\\s+la(s)?|para))?\\s*)"
            .replace("{SpecificTimeOfDayRegex}", SpecificTimeOfDayRegex);

    public static final String SimpleTimeOfTodayAfterRegex = "({HourNumRegex}|{BaseDateTime.HourRegex})\\s*(,\\s*)?((en|de(l)?)?\\s+)?{SpecificTimeOfDayRegex}"
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{SpecificTimeOfDayRegex}", SpecificTimeOfDayRegex);

    public static final String SimpleTimeOfTodayBeforeRegex = "({SpecificTimeOfDayRegex}(\\s*,)?(\\s+(a\\s+la|para))?\\s*({HourNumRegex}|{BaseDateTime.HourRegex}))"
            .replace("{SpecificTimeOfDayRegex}", SpecificTimeOfDayRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex);

    public static final String TheEndOfRegex = "((a|e)l\\s+)?fin(alizar|al)?(\\s+(el|de(l)?)(\\s+d[ií]a)?(\\s+de)?)?\\s*$";

    public static final String UnitRegex = "(?<unit>años|año|meses|mes|semanas|semana|d[ií]as|d[ií]a|horas|hora|h|hr|hrs|hs|minutos|minuto|mins|min|segundos|segundo|segs|seg)\\b";

    public static final String ConnectorRegex = "^(,|t|para la|para las|cerca de la|cerca de las)$";

    public static final String TimeHourNumRegex = "(?<hour>veintiuno|veintidos|veintitres|veinticuatro|cero|uno|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|diecis([eé])is|diecisiete|dieciocho|diecinueve|veinte)";

    public static final String PureNumFromTo = "((desde|de)\\s+(la(s)?\\s+)?)?({BaseDateTime.HourRegex}|{TimeHourNumRegex})(\\s*(?<leftDesc>{DescRegex}))?\\s*{TillRegex}\\s*({BaseDateTime.HourRegex}|{TimeHourNumRegex})\\s*(?<rightDesc>{PmRegex}|{AmRegex}|{DescRegex})?"
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{TimeHourNumRegex}", TimeHourNumRegex)
            .replace("{DescRegex}", DescRegex)
            .replace("{TillRegex}", TillRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{AmRegex}", AmRegex);

    public static final String PureNumBetweenAnd = "(entre\\s+(la(s)?\\s+)?)({BaseDateTime.HourRegex}|{TimeHourNumRegex})(\\s*(?<leftDesc>{DescRegex}))?\\s*y\\s*(la(s)?\\s+)?({BaseDateTime.HourRegex}|{TimeHourNumRegex})\\s*(?<rightDesc>{PmRegex}|{AmRegex}|{DescRegex})?"
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{TimeHourNumRegex}", TimeHourNumRegex)
            .replace("{DescRegex}", DescRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{AmRegex}", AmRegex);

    public static final String SpecificTimeFromTo = "^[.]";

    public static final String SpecificTimeBetweenAnd = "^[.]";

    public static final String TimeUnitRegex = "(?<unit>horas|hora|h|minutos|minuto|mins|min|segundos|segundo|secs|sec)\\b";

    public static final String TimeFollowedUnit = "^\\s*{TimeUnitRegex}"
            .replace("{TimeUnitRegex}", TimeUnitRegex);

    public static final String TimeNumberCombinedWithUnit = "\\b(?<num>\\d+(\\,\\d*)?)\\s*{TimeUnitRegex}"
            .replace("{TimeUnitRegex}", TimeUnitRegex);

    public static final String DateTimePeriodNumberCombinedWithUnit = "\\b(?<num>\\d+(\\.\\d*)?)\\s*{TimeUnitRegex}"
            .replace("{TimeUnitRegex}", TimeUnitRegex);

    public static final String PeriodTimeOfDayWithDateRegex = "\\b(((y|a|en|por)\\s+la|al)\\s+)?(?<timeOfDay>mañana|madrugada|(pasado\\s+(el\\s+)?)?medio\\s?d[ií]a|tarde|noche|anoche)\\b";

    public static final String RelativeTimeUnitRegex = "({PastRegex}|{FutureRegex})\\s+{UnitRegex}"
            .replace("{PastRegex}", PastRegex)
            .replace("{FutureRegex}", FutureRegex)
            .replace("{UnitRegex}", UnitRegex);

    public static final String LessThanRegex = "^[.]";

    public static final String MoreThanRegex = "^[.]";

    public static final String SuffixAndRegex = "(?<suffix>\\s*(y)\\s+((un|uno|una)\\s+)?(?<suffix_num>media|cuarto))";

    public static final String FollowedUnit = "^\\s*{UnitRegex}"
            .replace("{UnitRegex}", UnitRegex);

    public static final String DurationNumberCombinedWithUnit = "\\b(?<num>\\d+(\\,\\d*)?){UnitRegex}"
            .replace("{UnitRegex}", UnitRegex);

    public static final String AnUnitRegex = "\\b(un(a)?)\\s+{UnitRegex}"
            .replace("{UnitRegex}", UnitRegex);

    public static final String DuringRegex = "^[.]";

    public static final String AllRegex = "\\b(?<all>tod[oa]?\\s+(el|la)\\s+(?<unit>año|mes|semana|d[ií]a))\\b";

    public static final String HalfRegex = "\\b(?<half>medi[oa]\\s+(?<unit>ano|mes|semana|d[íi]a|hora))\\b";

    public static final String ConjunctionRegex = "^[.]";

    public static final String InexactNumberRegex = "\\b(pocos|poco|algo|varios)\\b";

    public static final String InexactNumberUnitRegex = "\\b(pocos|poco|algo|varios)\\s+{UnitRegex}"
            .replace("{UnitRegex}", UnitRegex);

    public static final String HolidayRegex1 = "\\b(?<holiday>viernes santo|mi[eé]rcoles de ceniza|martes de carnaval|d[ií]a (de|de los) presidentes?|clebraci[oó]n de mao|año nuevo chino|año nuevo|noche vieja|(festividad de )?los mayos|d[ií]a de los inocentes|navidad|noche buena|d[ií]a de acci[oó]n de gracias|acci[oó]n de gracias|yuandan|halloween|noches de brujas|pascuas)(\\s+(del?\\s+)?({FullYearRegex}|(?<order>(pr[oó]xim[oa]?|est[ea]|[uú]ltim[oa]?|en))\\s+año))?\\b"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String HolidayRegex2 = "\\b(?<holiday>(d[ií]a( del?( la)?)? )?(martin luther king|todos los santos|blanco|san patricio|san valent[ií]n|san jorge|cinco de mayo|independencia|raza|trabajador))(\\s+(del?\\s+)?({FullYearRegex}|(?<order>(pr[oó]xim[oa]?|est[ea]|[uú]ltim[oa]?|en))\\s+año))?\\b"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String HolidayRegex3 = "\\b(?<holiday>(d[ií]a( del?( las?)?)? )(trabajador|madres?|padres?|[aá]rbol|mujer(es)?|solteros?|niños?|marmota|san valent[ií]n|maestro))(\\s+(del?\\s+)?({FullYearRegex}|(?<order>(pr[oó]xim[oa]?|est[ea]|[uú]ltim[oa]?|en))\\s+año))?\\b"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String BeforeRegex = "(antes(\\s+del?(\\s+las?)?)?)";

    public static final String AfterRegex = "(despues(\\s*del?(\\s+las?)?)?)";

    public static final String SinceRegex = "(desde(\\s+(las?|el))?)";

    public static final String PeriodicRegex = "\\b(?<periodic>a\\s*diario|diariamente|mensualmente|semanalmente|quincenalmente|anualmente)\\b";

    public static final String EachExpression = "cada|tod[oa]s\\s*(l[oa]s)?";

    public static final String EachUnitRegex = "(?<each>({EachExpression})\\s*{UnitRegex})"
            .replace("{EachExpression}", EachExpression)
            .replace("{UnitRegex}", UnitRegex);

    public static final String EachPrefixRegex = "(?<each>({EachExpression})\\s*$)"
            .replace("{EachExpression}", EachExpression);

    public static final String EachDayRegex = "\\s*({EachExpression})\\s*d[ií]as\\s*\\b"
            .replace("{EachExpression}", EachExpression);

    public static final String BeforeEachDayRegex = "({EachExpression})\\s*d[ií]as(\\s+a\\s+las?)?\\s*\\b"
            .replace("{EachExpression}", EachExpression);

    public static final String SetEachRegex = "(?<each>({EachExpression})\\s*)"
            .replace("{EachExpression}", EachExpression);

    public static final String LaterEarlyPeriodRegex = "^[.]";

    public static final String WeekWithWeekDayRangeRegex = "^[.]";

    public static final String GeneralEndingRegex = "^[.]";

    public static final String MiddlePauseRegex = "^[.]";

    public static final String PrefixArticleRegex = "^[\\.]";

    public static final String OrRegex = "^[.]";

    public static final String YearPlusNumberRegex = "^[.]";

    public static final String NumberAsTimeRegex = "^[.]";

    public static final String TimeBeforeAfterRegex = "^[.]";

    public static final String DateNumberConnectorRegex = "^[.]";

    public static final String CenturyRegex = "^[.]";

    public static final String DecadeRegex = "^[.]";

    public static final String DecadeWithCenturyRegex = "^[.]";

    public static final String RelativeDecadeRegex = "^[.]";

    public static final String ComplexDatePeriodRegex = "^[.]";

    public static final String FullTextYearRegex = "^[\\*]";

    public static final String YearSuffix = "(,?\\s*({YearRegex}|{FullTextYearRegex}))"
            .replace("{YearRegex}", YearRegex)
            .replace("{FullTextYearRegex}", FullTextYearRegex);

    public static final String AgoRegex = "\\b(antes)\\b";

    public static final String LaterRegex = "\\b(despu[eé]s|desde ahora)\\b";

    public static final String Tomorrow = "mañana";

    public static final Map<String, String> UnitMap = ImmutableMap.<String, String>builder()
        .put("años", "Y")
        .put("año", "Y")
        .put("meses", "MON")
        .put("mes", "MON")
        .put("semanas", "W")
        .put("semana", "W")
        .put("dias", "D")
        .put("dia", "D")
        .put("días", "D")
        .put("día", "D")
        .put("horas", "H")
        .put("hora", "H")
        .put("hrs", "H")
        .put("hr", "H")
        .put("h", "H")
        .put("minutos", "M")
        .put("minuto", "M")
        .put("mins", "M")
        .put("min", "M")
        .put("segundos", "S")
        .put("segundo", "S")
        .put("segs", "S")
        .put("seg", "S")
        .build();

    public static final Map<String, Long> UnitValueMap = ImmutableMap.<String, Long>builder()
        .put("años", 31536000L)
        .put("año", 31536000L)
        .put("meses", 2592000L)
        .put("mes", 2592000L)
        .put("semanas", 604800L)
        .put("semana", 604800L)
        .put("dias", 86400L)
        .put("dia", 86400L)
        .put("días", 86400L)
        .put("día", 86400L)
        .put("horas", 3600L)
        .put("hora", 3600L)
        .put("hrs", 3600L)
        .put("hr", 3600L)
        .put("h", 3600L)
        .put("minutos", 60L)
        .put("minuto", 60L)
        .put("mins", 60L)
        .put("min", 60L)
        .put("segundos", 1L)
        .put("segundo", 1L)
        .put("segs", 1L)
        .put("seg", 1L)
        .build();

    public static final Map<String, String> SeasonMap = ImmutableMap.<String, String>builder()
        .put("primavera", "SP")
        .put("verano", "SU")
        .put("otoño", "FA")
        .put("invierno", "WI")
        .build();

    public static final Map<String, Long> SeasonValueMap = ImmutableMap.<String, Long>builder()
        .put("SP", 3L)
        .put("SU", 6L)
        .put("FA", 9L)
        .put("WI", 12L)
        .build();

    public static final Map<String, Long> CardinalMap = ImmutableMap.<String, Long>builder()
        .put("primer", 1L)
        .put("primero", 1L)
        .put("primera", 1L)
        .put("1er", 1L)
        .put("1ro", 1L)
        .put("1ra", 1L)
        .put("segundo", 2L)
        .put("segunda", 2L)
        .put("2do", 2L)
        .put("2da", 2L)
        .put("tercer", 3L)
        .put("tercero", 3L)
        .put("tercera", 3L)
        .put("3er", 3L)
        .put("3ro", 3L)
        .put("3ra", 3L)
        .put("cuarto", 4L)
        .put("cuarta", 4L)
        .put("4to", 4L)
        .put("4ta", 4L)
        .put("quinto", 5L)
        .put("quinta", 5L)
        .put("5to", 5L)
        .put("5ta", 5L)
        .build();

    public static final Map<String, Long> DayOfWeek = ImmutableMap.<String, Long>builder()
        .put("lunes", 1L)
        .put("martes", 2L)
        .put("miercoles", 3L)
        .put("miércoles", 3L)
        .put("jueves", 4L)
        .put("viernes", 5L)
        .put("sabado", 6L)
        .put("domingo", 0L)
        .put("lu", 1L)
        .put("ma", 2L)
        .put("mi", 3L)
        .put("ju", 4L)
        .put("vi", 5L)
        .put("sa", 6L)
        .put("do", 0L)
        .build();

    public static final Map<String, Long> MonthOfYear = ImmutableMap.<String, Long>builder()
        .put("enero", 1L)
        .put("febrero", 2L)
        .put("marzo", 3L)
        .put("abril", 4L)
        .put("mayo", 5L)
        .put("junio", 6L)
        .put("julio", 7L)
        .put("agosto", 8L)
        .put("septiembre", 9L)
        .put("setiembre", 9L)
        .put("octubre", 10L)
        .put("noviembre", 11L)
        .put("diciembre", 12L)
        .put("ene", 1L)
        .put("feb", 2L)
        .put("mar", 3L)
        .put("abr", 4L)
        .put("may", 5L)
        .put("jun", 6L)
        .put("jul", 7L)
        .put("ago", 8L)
        .put("sept", 9L)
        .put("set", 9L)
        .put("oct", 10L)
        .put("nov", 11L)
        .put("dic", 12L)
        .put("1", 1L)
        .put("2", 2L)
        .put("3", 3L)
        .put("4", 4L)
        .put("5", 5L)
        .put("6", 6L)
        .put("7", 7L)
        .put("8", 8L)
        .put("9", 9L)
        .put("10", 10L)
        .put("11", 11L)
        .put("12", 12L)
        .put("01", 1L)
        .put("02", 2L)
        .put("03", 3L)
        .put("04", 4L)
        .put("05", 5L)
        .put("06", 6L)
        .put("07", 7L)
        .put("08", 8L)
        .put("09", 9L)
        .build();

    public static final Map<String, Long> Numbers = ImmutableMap.<String, Long>builder()
        .put("cero", 0L)
        .put("un", 1L)
        .put("una", 1L)
        .put("uno", 1L)
        .put("dos", 2L)
        .put("tres", 3L)
        .put("cuatro", 4L)
        .put("cinco", 5L)
        .put("seis", 6L)
        .put("siete", 7L)
        .put("ocho", 8L)
        .put("nueve", 9L)
        .put("diez", 10L)
        .put("once", 11L)
        .put("doce", 12L)
        .put("docena", 12L)
        .put("docenas", 12L)
        .put("trece", 13L)
        .put("catorce", 14L)
        .put("quince", 15L)
        .put("dieciseis", 16L)
        .put("dieciséis", 16L)
        .put("diecisiete", 17L)
        .put("dieciocho", 18L)
        .put("diecinueve", 19L)
        .put("veinte", 20L)
        .put("ventiuna", 21L)
        .put("ventiuno", 21L)
        .put("veintiun", 21L)
        .put("veintiún", 21L)
        .put("veintiuno", 21L)
        .put("veintiuna", 21L)
        .put("veintidos", 22L)
        .put("veintidós", 22L)
        .put("veintitres", 23L)
        .put("veintitrés", 23L)
        .put("veinticuatro", 24L)
        .put("veinticinco", 25L)
        .put("veintiseis", 26L)
        .put("veintiséis", 26L)
        .put("veintisiete", 27L)
        .put("veintiocho", 28L)
        .put("veintinueve", 29L)
        .put("treinta", 30L)
        .build();

    public static final Map<String, String[]> HolidayNames = ImmutableMap.<String, String[]>builder()
        .put("padres", new String[]{"diadelpadre"})
        .put("madres", new String[]{"diadelamadre"})
        .put("acciondegracias", new String[]{"diadegracias", "diadeacciondegracias", "acciondegracias"})
        .put("trabajador", new String[]{"diadeltrabajador"})
        .put("delaraza", new String[]{"diadelaraza", "diadeladiversidadcultural"})
        .put("memoria", new String[]{"diadelamemoria"})
        .put("pascuas", new String[]{"diadepascuas", "pascuas"})
        .put("navidad", new String[]{"navidad", "diadenavidad"})
        .put("nochebuena", new String[]{"diadenochebuena", "nochebuena"})
        .put("añonuevo", new String[]{"añonuevo", "diadeañonuevo"})
        .put("nochevieja", new String[]{"nochevieja", "diadenochevieja"})
        .put("yuandan", new String[]{"yuandan"})
        .put("maestro", new String[]{"diadelmaestro"})
        .put("todoslossantos", new String[]{"todoslossantos"})
        .put("niño", new String[]{"diadelniño"})
        .put("mujer", new String[]{"diadelamujer"})
        .build();

    public static final Map<String, String> VariableHolidaysTimexDictionary = ImmutableMap.<String, String>builder()
        .put("padres", "-06-WXX-7-3")
        .put("madres", "-05-WXX-7-2")
        .put("acciondegracias", "-11-WXX-4-4")
        .put("trabajador", "-05-WXX-1-1")
        .put("delaraza", "-10-WXX-1-2")
        .put("memoria", "-03-WXX-2-4")
        .build();

    public static final Map<String, Double> DoubleNumbers = ImmutableMap.<String, Double>builder()
        .put("mitad", 0.5D)
        .put("cuarto", 0.25D)
        .build();

    public static final String DateTokenPrefix = "en ";

    public static final String TimeTokenPrefix = "a las ";

    public static final String TokenBeforeDate = "el ";

    public static final String TokenBeforeTime = "la ";

    public static final String NextPrefixRegex = "(pr[oó]xim[oa]|siguiente)\\b";

    public static final String PastPrefixRegex = "([uú]ltim[oa])\\b";

    public static final String ThisPrefixRegex = "(est[ea])\\b";

    public static final String RelativeDayRegex = "^[\\.]";

    public static final String RestOfDateRegex = "^[\\.]";

    public static final String RelativeDurationUnitRegex = "^[\\.]";

    public static final String ReferenceDatePeriodRegex = "^[.]";

    public static final String FromToRegex = "\\b(from).+(to)\\b.+";

    public static final String SingleAmbiguousMonthRegex = "^(the\\s+)?(may|march)$";

    public static final String UnspecificDatePeriodRegex = "^[.]";

    public static final String PrepositionSuffixRegex = "\\b(on|in|at|around|for|during|since|from|to)$";

    public static final String RestOfDateTimeRegex = "^[\\.]";

    public static final String SetWeekDayRegex = "^[\\.]";

    public static final String NightRegex = "\\b(medionoche|noche)\\b";

    public static final String CommonDatePrefixRegex = "^[\\.]";

    public static final String DurationUnitRegex = "^[\\.]";

    public static final String DurationConnectorRegex = "^[.]";

    public static final String YearAfterRegex = "^[.]";

    public static final String YearPeriodRegex = "^[.]";

    public static final String FutureSuffixRegex = "^[.]";

    public static final Map<String, Long> WrittenDecades = ImmutableMap.<String, Long>builder()
        .put("", 0L)
        .build();

    public static final Map<String, Long> SpecialDecadeCases = ImmutableMap.<String, Long>builder()
        .put("", 0L)
        .build();

    public static final String DefaultLanguageFallback = "DMY";

    public static final List<String> DurationDateRestrictions = Arrays.asList();
}
