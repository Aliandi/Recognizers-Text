// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.microsoft.recognizers.text.datetime.resources;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.common.collect.ImmutableMap;

public class PortugueseDateTime {

    public static final String TillRegex = "(?<till>ate|as|às|até|ateh|a|ao|--|-|—|——)(\\s+(o|[aà](s)?))?";

    public static final String AndRegex = "(?<and>e|e\\s*o|--|-|—|——)";

    public static final String DayRegex = "(?<day>01|02|03|04|05|06|07|08|09|1|10|11|12|13|14|15|16|17|18|19|2|20|21|22|23|24|25|26|27|28|29|3|30|31|4|5|6|7|8|9)(?=\\b|t)";

    public static final String MonthNumRegex = "(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\b";

    public static final String YearRegex = "(?<year>((1[5-9]|20)\\d{2})|[0-27-9]\\d)";

    public static final String FullYearRegex = "\\b(?<year>19\\d{2}|20\\d{2})\\b";

    public static final String RelativeMonthRegex = "(?<relmonth>([nd]?es[st]e|pr[óo]ximo|passsado|[uú]ltimo)\\s+m[eê]s)\\b";

    public static final String MonthRegex = "(?<month>Abril|Abr|Agosto|Ago|Dezembro|Dez|Fevereiro|Fev|Janeiro|Jan|Julho|Jul|Junho|Jun|Mar[çc]o|Mar|Maio|Mai|Novembro|Nov|Outubro|Out|Septembro|Setembro|Sept|Set)";

    public static final String MonthSuffixRegex = "(?<msuf>((em|no)\\s+|d[eo]\\s+)?({RelativeMonthRegex}|{MonthRegex}))"
            .replace("{RelativeMonthRegex}", RelativeMonthRegex)
            .replace("{MonthRegex}", MonthRegex);

    public static final String DateUnitRegex = "(?<unit>anos|ano|meses|m[êe]s|semanas|semana|dia(s)?)\\b";

    public static final String PastRegex = "(?<past>\\b(passad(a|o)(s)?|[uú]ltim[oa](s)?|anterior(es)?|h[aá]|pr[ée]vi[oa](s)?)\\b)";

    public static final String FutureRegex = "(?<past>\\b(seguinte(s)?|pr[oó]xim[oa](s)?|dentro\\s+de|em|daqui\\s+a)\\b)";

    public static final String SimpleCasesRegex = "\\b((desde\\s+[oa]|desde|d[oa])\\s+)?(dia\\s+)?({DayRegex})\\s*{TillRegex}\\s*(o dia\\s+)?({DayRegex})\\s+{MonthSuffixRegex}((\\s+|\\s*,\\s*){FullYearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{TillRegex}", TillRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String MonthFrontSimpleCasesRegex = "\\b{MonthSuffixRegex}\\s+((desde\\s+[oa]|desde|d[oa])\\s+)?(dia\\s+)?({DayRegex})\\s*{TillRegex}\\s*({DayRegex})((\\s+|\\s*,\\s*){FullYearRegex})?\\b"
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{TillRegex}", TillRegex)
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String MonthFrontBetweenRegex = "\\b{MonthSuffixRegex}\\s+((entre|entre\\s+[oa]s?)\\s+)(dias?\\s+)?({DayRegex})\\s*{AndRegex}\\s*({DayRegex})((\\s+|\\s*,\\s*){FullYearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{AndRegex}", AndRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String DayBetweenRegex = "\\b((entre|entre\\s+[oa]s?)\\s+)(dia\\s+)?({DayRegex})\\s*{AndRegex}\\s*({DayRegex})\\s+{MonthSuffixRegex}((\\s+|\\s*,\\s*){FullYearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{AndRegex}", AndRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String OneWordPeriodRegex = "\\b(((pr[oó]xim[oa]?|[nd]?es[st]e|aquel[ea]|[uú]ltim[oa]?|em)\\s+)?(?<month>Abril|Abr|Agosto|Ago|Dezembro|Dez|Fevereiro|Fev|Janeiro|Jan|Julho|Jul|Junho|Jun|Mar[çc]o|Mar|Maio|Mai|Novembro|Nov|Outubro|Out|Septembro|Setembro|Sept|Set)|(?<=\\b(de|do|da|o|a)\\s+)?(pr[oó]xim[oa](s)?|[uú]ltim[oa]s?|est(e|a))\\s+(fim de semana|fins de semana|semana|m[êe]s|ano)|fim de semana|fins de semana|(m[êe]s|anos)? [àa] data)\\b";

    public static final String MonthWithYearRegex = "\\b(((pr[oó]xim[oa](s)?|[nd]?es[st]e|aquele|[uú]ltim[oa]?|em)\\s+)?(?<month><month>Abril|Abr|Agosto|Ago|Dezembro|Dez|Fevereiro|Fev|Janeiro|Jan|Julho|Jul|Junho|Jun|Mar[çc]o|Mar|Maio|Mai|Novembro|Nov|Outubro|Out|Septembro|Setembro|Sept|Set)\\s+((de|do|da|o|a)\\s+)?({FullYearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|[nd]?es[st]e)\\s+ano))\\b"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String MonthNumWithYearRegex = "({FullYearRegex}(\\s*?)[/\\-\\.](\\s*?){MonthNumRegex})|({MonthNumRegex}(\\s*?)[/\\-](\\s*?){FullYearRegex})"
            .replace("{FullYearRegex}", FullYearRegex)
            .replace("{MonthNumRegex}", MonthNumRegex);

    public static final String WeekOfMonthRegex = "(?<wom>(a|na\\s+)?(?<cardinal>primeira?|1a|segunda|2a|terceira|3a|[qc]uarta|4a|quinta|5a|[uú]ltima)\\s+semana\\s+{MonthSuffixRegex})"
            .replace("{MonthSuffixRegex}", MonthSuffixRegex);

    public static final String WeekOfYearRegex = "(?<woy>(a|na\\s+)?(?<cardinal>primeira?|1a|segunda|2a|terceira|3a|[qc]uarta|4a|quinta|5a|[uú]ltima?)\\s+semana(\\s+d[oe]?)?\\s+({FullYearRegex}|(?<order>pr[oó]ximo|[uú]ltimo|[nd]?es[st]e)\\s+ano))"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String FollowedDateUnit = "^\\s*{DateUnitRegex}"
            .replace("{DateUnitRegex}", DateUnitRegex);

    public static final String NumberCombinedWithDateUnit = "\\b(?<num>\\d+(\\.\\d*)?){DateUnitRegex}"
            .replace("{DateUnitRegex}", DateUnitRegex);

    public static final String QuarterRegex = "(n?o\\s+)?(?<cardinal>primeiro|1[oº]|segundo|2[oº]|terceiro|3[oº]|[qc]uarto|4[oº])\\s+trimestre(\\s+d[oe]|\\s*,\\s*)?\\s+({FullYearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|[nd]?es[st]e)\\s+ano)"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String QuarterRegexYearFront = "({FullYearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|[nd]?es[st]e)\\s+ano)\\s+(n?o\\s+)?(?<cardinal>(primeiro)|1[oº]|segundo|2[oº]|terceiro|3[oº]|[qc]uarto|4[oº])\\s+trimestre"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String AllHalfYearRegex = "^[.]";

    public static final String PrefixDayRegex = "^[.]";

    public static final String SeasonRegex = "\\b(?<season>(([uú]ltim[oa]|[nd]?es[st][ea]|n?[oa]|(pr[oó]xim[oa]s?|seguinte))\\s+)?(?<seas>primavera|ver[ãa]o|outono|inverno)((\\s+)?(seguinte|((de\\s+|,)?\\s*{FullYearRegex})|((do\\s+)?(?<order>pr[oó]ximo|[uú]ltimo|[nd]?es[st]e)\\s+ano)))?)\\b"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String WhichWeekRegex = "(semana)(\\s*)(?<number>\\d\\d|\\d|0\\d)";

    public static final String WeekOfRegex = "(semana)(\\s*)((do|da|de))";

    public static final String MonthOfRegex = "(mes)(\\s*)((do|da|de))";

    public static final String RangeUnitRegex = "\\b(?<unit>anos|ano|meses|m[êe]s|semanas|semana)\\b";

    public static final String InConnectorRegex = "\\b(em)\\b";

    public static final String WithinNextPrefixRegex = "^[.]";

    public static final String CenturySuffixRegex = "^[.]";

    public static final String FromRegex = "((desde|de)(\\s*a(s)?)?)$";

    public static final String ConnectorAndRegex = "(e\\s*([àa](s)?)?)$";

    public static final String BetweenRegex = "(entre\\s*([oa](s)?)?)";

    public static final String WeekDayRegex = "\\b(?<weekday>Domingos?|Segundas?-feiras?|Segundas?\\s+feiras?|Segundas?|2a|Ter[çca]s?-feiras?|Ter[çc]as?\\s+feiras?|Ter[cça]s?|3a|Quartas?-feiras?|Quartas?\\s+feiras?|Quartas?|4a|Quintas?-feiras?|Quintas?\\s+feiras?|Quintas?|5a|Sextas?-feiras?|Sextas?\\s+feiras?|Sextas?|6a|S[aá]bados?|2ª|3ª|4ª|5ª|6ª|Dom|Seg|Ter|Qua|Qui|Sex|Sab|Seg.|Ter[cç].|Qua.|Qui.|Sex.|S[aá]b.|Dom.)\\b";

    public static final String OnRegex = "(?<=\\b(em|no)\\s+)({DayRegex}s?)\\b"
            .replace("{DayRegex}", DayRegex);

    public static final String RelaxedOnRegex = "(?<=\\b(em|n[oa]|d[oa])\\s+)(dia\\s+)?((?<day>10|11|12|13|14|15|16|17|18|19|1|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)s?)\\b";

    public static final String ThisRegex = "\\b(([nd]?es[st][ea]\\s*){WeekDayRegex})|({WeekDayRegex}\\s*([nd]?es[st]a\\s+semana))\\b"
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String LastDateRegex = "\\b(([uú]ltim[ao])\\s*{WeekDayRegex})|({WeekDayRegex}(\\s+(([nd]?es[st]a|na|da)\\s+([uú]ltima\\s+)?semana)))\\b"
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String NextDateRegex = "\\b(((pr[oó]xim[oa]|seguinte)\\s*){WeekDayRegex})|({WeekDayRegex}(\\s+(da\\s+)?(pr[oó]xima|seguinte)?(\\s*semana\\s+seguinte|\\s*semana)?))\\b"
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String SpecialDayRegex = "\\b((d?o\\s+)?(dia\\s+antes\\s+de\\s+ontem|antes\\s+de\\s+ontem|anteontem)|((d?o\\s+)?(dia\\s+|depois\\s+|dia\\s+depois\\s+)?de\\s+amanh[aã])|(o\\s)?dia\\s+seguinte|(o\\s)?pr[oó]ximo\\s+dia|(o\\s+)?[uú]ltimo\\s+dia|ontem|amanh[ãa]|hoje)|(do\\s+dia$)\\b";

    public static final String SpecialDayWithNumRegex = "^[.]";

    public static final String ForTheRegex = "^[.]";

    public static final String WeekDayAndDayOfMonthRegex = "^[.]";

    public static final String WeekDayOfMonthRegex = "(?<wom>(n?[ao]\\s+)?(?<cardinal>primeir[ao]|1[ao]|segund[ao]|2[ao]|terceir[ao]|3[ao]|[qc]uart[ao]|4[ao]|quint[ao]|5[ao]|[uú]ltim[ao])\\s+{WeekDayRegex}\\s+{MonthSuffixRegex})"
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex);

    public static final String RelativeWeekDayRegex = "^[.]";

    public static final String NumberEndingPattern = "^[.]";

    public static final String SpecialDateRegex = "(?<=\\bno\\s+){DayRegex}\\b"
            .replace("{DayRegex}", DayRegex);

    public static final String OfMonthRegex = "^\\s*de\\s*{MonthSuffixRegex}"
            .replace("{MonthSuffixRegex}", MonthSuffixRegex);

    public static final String MonthEndRegex = "({MonthRegex}\\s*(o)?\\s*$)"
            .replace("{MonthRegex}", MonthRegex);

    public static final String WeekDayEnd = "{WeekDayRegex}\\s*,?\\s*$"
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String DateExtractor1 = "\\b({WeekDayRegex}(\\s+|\\s*,\\s*))?{DayRegex}?((\\s*(de)|[/\\\\\\.\\-])\\s*)?{MonthRegex}\\b"
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthRegex}", MonthRegex);

    public static final String DateExtractor2 = "\\b({WeekDayRegex}(\\s+|\\s*,\\s*))?{DayRegex}\\s*([\\.\\-]|de)?\\s*{MonthRegex}?(\\s*(,|de)\\s*){YearRegex}\\b"
            .replace("{MonthRegex}", MonthRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{YearRegex}", YearRegex)
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String DateExtractor3 = "\\b({WeekDayRegex}(\\s+|\\s*,\\s*))?{DayRegex}(\\s+|\\s*,\\s*|\\s+de\\s+|\\s*-\\s*){MonthRegex}((\\s+|\\s*(,|de)\\s*){YearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthRegex}", MonthRegex)
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String DateExtractor4 = "\\b{MonthNumRegex}\\s*[/\\\\\\-]\\s*{DayRegex}\\s*[/\\\\\\-]\\s*{YearRegex}"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String DateExtractor5 = "\\b{DayRegex}\\s*[/\\\\\\-\\.]\\s*{MonthNumRegex}\\s*[/\\\\\\-\\.]\\s*{YearRegex}"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String DateExtractor6 = "(?<=\\b(em|no|o)\\s+){MonthNumRegex}[\\-\\.]{DayRegex}\\b"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex);

    public static final String DateExtractor7 = "\\b{MonthNumRegex}\\s*/\\s*{DayRegex}((\\s+|\\s*(,|de)\\s*){YearRegex})?\\b"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String DateExtractor8 = "(?<=\\b(em|no|o)\\s+){DayRegex}[\\\\\\-]{MonthNumRegex}\\b"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex);

    public static final String DateExtractor9 = "\\b{DayRegex}\\s*/\\s*{MonthNumRegex}((\\s+|\\s*(,|de)\\s*){YearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String DateExtractor10 = "\\b{YearRegex}\\s*[/\\\\\\-\\.]\\s*{MonthNumRegex}\\s*[/\\\\\\-\\.]\\s*{DayRegex}"
            .replace("{YearRegex}", YearRegex)
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex);

    public static final String DateExtractor11 = "(?<=\\b(dia)\\s+){DayRegex}"
            .replace("{DayRegex}", DayRegex);

    public static final String HourNumRegex = "\\b(?<hournum>zero|uma|duas|tr[êe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze)\\b";

    public static final String DescRegex = "(?<desc>pm\\b|am\\b|p\\.m\\.|a\\.m\\.)";

    public static final String AmDescRegex = "(am\\b|a\\.m\\.|a m\\b|a\\. m\\.\\b|a\\.m\\b|a\\. m\\b)";

    public static final String PmDescRegex = "(pm\\b|p\\.m\\.|p\\b|p m\\b|p\\. m\\.\\b|p\\.m\\b|p\\. m\\b)";

    public static final String AmPmDescRegex = "(ampm)";

    public static final String MinuteNumRegex = "(?<minnum>um|dois|tr[êe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quatorze|quinze|dez[ea]sseis|dez[ea]sete|dezoito|dez[ea]nove|vinte|trinta|[qc]uarenta|cin[qc]uenta)";

    public static final String DeltaMinuteNumRegex = "(?<deltaminnum>um|dois|tr[êe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quatorze|quinze|dez[ea]sseis|dez[ea]sete|dezoito|dez[ea]nove|vinte|trinta|[qc]uarenta|cin[qc]uenta)";

    public static final String OclockRegex = "(?<oclock>em\\s+ponto)";

    public static final String PmRegex = "(?<pm>((pela|de|da|\\b[àa]\\b|na)\\s+(tarde|noite)))|((depois\\s+do|ap[óo]s\\s+o)\\s+(almo[çc]o|meio dia|meio-dia))";

    public static final String AmRegex = "(?<am>(pela|de|da|na)\\s+(manh[ãa]|madrugada))";

    public static final String AmTimeRegex = "(?<am>([dn]?es[st]a|(pela|de|da|na))\\s+(manh[ãa]|madrugada))";

    public static final String PmTimeRegex = "(?<pm>(([dn]?es[st]a|\\b[àa]\\b|(pela|de|da|na))\\s+(tarde|noite)))|((depois\\s+do|ap[óo]s\\s+o)\\s+(almo[çc]o|meio dia|meio-dia))";

    public static final String LessThanOneHour = "(?<lth>((\\s+e\\s+)?(quinze|(um\\s+|dois\\s+|tr[êes]\\s+)?quartos?)|quinze|(\\s*)(um\\s+|dois\\s+|tr[êes]\\s+)?quartos?|(\\s+e\\s+)(meia|trinta)|{BaseDateTime.DeltaMinuteRegex}(\\s+(minuto|minutos|min|mins))|{DeltaMinuteNumRegex}(\\s+(minuto|minutos|min|mins))))"
            .replace("{BaseDateTime.DeltaMinuteRegex}", BaseDateTime.DeltaMinuteRegex)
            .replace("{DeltaMinuteNumRegex}", DeltaMinuteNumRegex);

    public static final String TensTimeRegex = "(?<tens>dez|vinte|trinta|[qc]uarenta|cin[qc]uenta)";

    public static final String WrittenTimeRegex = "(?<writtentime>({HourNumRegex}\\s*((e|menos)\\s+)?({MinuteNumRegex}|({TensTimeRegex}((\\s*e\\s+)?{MinuteNumRegex})?)))|(({MinuteNumRegex}|({TensTimeRegex}((\\s*e\\s+)?{MinuteNumRegex})?))\\s*((para as|pras|antes da|antes das)\\s+)?({HourNumRegex}|{BaseDateTime.HourRegex})))"
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{MinuteNumRegex}", MinuteNumRegex)
            .replace("{TensTimeRegex}", TensTimeRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex);

    public static final String TimePrefix = "(?<prefix>{LessThanOneHour}(\\s+(passad[ao]s)\\s+(as)?|\\s+depois\\s+(das?|do)|\\s+pras?|\\s+(para|antes)?\\s+([àa]s?))?)"
            .replace("{LessThanOneHour}", LessThanOneHour);

    public static final String TimeSuffix = "(?<suffix>({LessThanOneHour}\\s+)?({AmRegex}|{PmRegex}|{OclockRegex}))"
            .replace("{LessThanOneHour}", LessThanOneHour)
            .replace("{AmRegex}", AmRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{OclockRegex}", OclockRegex);

    public static final String BasicTime = "(?<basictime>{WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}:{BaseDateTime.MinuteRegex}(:{BaseDateTime.SecondRegex})?|{BaseDateTime.HourRegex})"
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{BaseDateTime.SecondRegex}", BaseDateTime.SecondRegex);

    public static final String AtRegex = "\\b(?<=\\b([aà]s?)\\s+)({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex})\\b"
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{WrittenTimeRegex}", WrittenTimeRegex);

    public static final String ConnectNumRegex = "({BaseDateTime.HourRegex}(?<min>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59)\\s*{DescRegex})"
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex1 = "(\\b{TimePrefix}\\s+)?({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex})\\s*({DescRegex})"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex2 = "(\\b{TimePrefix}\\s+)?(T)?{BaseDateTime.HourRegex}(\\s*)?:(\\s*)?{BaseDateTime.MinuteRegex}((\\s*)?:(\\s*)?{BaseDateTime.SecondRegex})?((\\s*{DescRegex})|\\b)"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{BaseDateTime.SecondRegex}", BaseDateTime.SecondRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex3 = "(\\b{TimePrefix}\\s+)?{BaseDateTime.HourRegex}\\.{BaseDateTime.MinuteRegex}(\\s*{DescRegex})"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex4 = "\\b(({DescRegex}?)|({BasicTime}?)({DescRegex}?))({TimePrefix}\\s*)({HourNumRegex}|{BaseDateTime.HourRegex})?(\\s+{TensTimeRegex}(\\s+e\\s+)?{MinuteNumRegex}?)?({OclockRegex})?\\b"
            .replace("{DescRegex}", DescRegex)
            .replace("{BasicTime}", BasicTime)
            .replace("{TimePrefix}", TimePrefix)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{TensTimeRegex}", TensTimeRegex)
            .replace("{MinuteNumRegex}", MinuteNumRegex)
            .replace("{OclockRegex}", OclockRegex);

    public static final String TimeRegex5 = "\\b({TimePrefix}|{BasicTime}{TimePrefix})\\s+(\\s*{DescRegex})?{BasicTime}?\\s*{TimeSuffix}\\b"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex)
            .replace("{TimeSuffix}", TimeSuffix);

    public static final String TimeRegex6 = "({BasicTime}(\\s*{DescRegex})?\\s+{TimeSuffix}\\b)"
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex)
            .replace("{TimeSuffix}", TimeSuffix);

    public static final String TimeRegex7 = "\\b{TimeSuffix}\\s+[àa]s?\\s+{BasicTime}((\\s*{DescRegex})|\\b)"
            .replace("{TimeSuffix}", TimeSuffix)
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex8 = "\\b{TimeSuffix}\\s+{BasicTime}((\\s*{DescRegex})|\\b)"
            .replace("{TimeSuffix}", TimeSuffix)
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex9 = "\\b(?<writtentime>{HourNumRegex}\\s+({TensTimeRegex}\\s*)?(e\\s+)?{MinuteNumRegex}?)\\b"
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{TensTimeRegex}", TensTimeRegex)
            .replace("{MinuteNumRegex}", MinuteNumRegex);

    public static final String TimeRegex10 = "(\\b([àa]|ao?)|na|de|da|pela)\\s+(madrugada|manh[ãa]|meio\\s*dia|meia\\s*noite|tarde|noite)";

    public static final String TimeRegex11 = "\\b({WrittenTimeRegex})({DescRegex}?)\\b"
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex12 = "(\\b{TimePrefix}\\s+)?{BaseDateTime.HourRegex}(\\s*h\\s*){BaseDateTime.MinuteRegex}(\\s*{DescRegex})?"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String PrepositionRegex = "(?<prep>([àa]s?|em|por|pelo|pela|no|na|de|d[oa]?)?$)";

    public static final String NowRegex = "\\b(?<now>((logo|exatamente)\\s+)?agora(\\s+mesmo)?|neste\\s+momento|(assim\\s+que|t[ãa]o\\s+cedo\\s+quanto)\\s+(poss[ií]vel|possas?|possamos)|o\\s+mais\\s+(cedo|r[aá]pido)\\s+poss[íi]vel|recentemente|previamente)\\b";

    public static final String SuffixRegex = "^\\s*((e|a|em|por|pelo|pela|no|na|de)\\s+)?(manh[ãa]|madrugada|meio\\s*dia|tarde|noite)\\b";

    public static final String TimeOfDayRegex = "\\b(?<timeOfDay>manh[ãa]|madrugada|tarde|noite|((depois\\s+do|ap[óo]s\\s+o)\\s+(almo[çc]o|meio dia|meio-dia)))\\b";

    public static final String SpecificTimeOfDayRegex = "\\b(((((a)?\\s+|[nd]?es[st]a|seguinte|pr[oó]xim[oa]|[uú]ltim[oa])\\s+)?{TimeOfDayRegex}))\\b"
            .replace("{TimeOfDayRegex}", TimeOfDayRegex);

    public static final String TimeOfTodayAfterRegex = "^\\s*(,\\s*)?([àa]|em|por|pelo|pela|de|no|na?\\s+)?{SpecificTimeOfDayRegex}"
            .replace("{SpecificTimeOfDayRegex}", SpecificTimeOfDayRegex);

    public static final String TimeOfTodayBeforeRegex = "({SpecificTimeOfDayRegex}(\\s*,)?(\\s+(a\\s+la(s)?|para))?\\s*)"
            .replace("{SpecificTimeOfDayRegex}", SpecificTimeOfDayRegex);

    public static final String SimpleTimeOfTodayAfterRegex = "({HourNumRegex}|{BaseDateTime.HourRegex})\\s*(,\\s*)?((en|de(l)?)?\\s+)?{SpecificTimeOfDayRegex}"
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{SpecificTimeOfDayRegex}", SpecificTimeOfDayRegex);

    public static final String SimpleTimeOfTodayBeforeRegex = "({SpecificTimeOfDayRegex}(\\s*,)?(\\s+(a\\s+la|para))?\\s*({HourNumRegex}|{BaseDateTime.HourRegex}))"
            .replace("{SpecificTimeOfDayRegex}", SpecificTimeOfDayRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex);

    public static final String TheEndOfRegex = "((no|ao)\\s+)?(fi(m|nal)|t[ée]rmin(o|ar))(\\s+d?o(\\s+dia)?(\\s+de)?)?\\s*$";

    public static final String UnitRegex = "(?<unit>anos|ano|meses|m[êe]s|semanas|semana|dias|dia|horas|hora|h|hr|hrs|hs|minutos|minuto|mins|min|segundos|segundo|segs|seg)\\b";

    public static final String ConnectorRegex = "^(,|t|para [ao]|para as|pras|cerca de|cerca das|perto de|perto das|quase)$";

    public static final String TimeHourNumRegex = "(?<hour>vinte e um|vinte e dois|vinte e tr[êe]s|vinte e quatro|zero|um|uma|dois|duas|tr[êe]s|quatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|quatorze|catorze|quinze|dez[ea]sseis|dez[ea]ssete|dezoito|dez[ea]nove|vinte)";

    public static final String PureNumFromTo = "((desde|de|da|das)\\s+(a(s)?\\s+)?)?({BaseDateTime.HourRegex}|{TimeHourNumRegex})(\\s*(?<leftDesc>{DescRegex}))?\\s*{TillRegex}\\s*({BaseDateTime.HourRegex}|{TimeHourNumRegex})\\s*(?<rightDesc>{PmRegex}|{AmRegex}|{DescRegex})?"
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{TimeHourNumRegex}", TimeHourNumRegex)
            .replace("{DescRegex}", DescRegex)
            .replace("{TillRegex}", TillRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{AmRegex}", AmRegex);

    public static final String PureNumBetweenAnd = "(entre\\s+((a|as)?\\s+)?)({BaseDateTime.HourRegex}|{TimeHourNumRegex})(\\s*(?<leftDesc>{DescRegex}))?\\s*e\\s*(a(s)?\\s+)?({BaseDateTime.HourRegex}|{TimeHourNumRegex})\\s*(?<rightDesc>{PmRegex}|{AmRegex}|{DescRegex})?"
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{TimeHourNumRegex}", TimeHourNumRegex)
            .replace("{DescRegex}", DescRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{AmRegex}", AmRegex);

    public static final String SpecificTimeFromTo = "^[.]";

    public static final String SpecificTimeBetweenAnd = "^[.]";

    public static final String TimeUnitRegex = "(?<unit>horas|hora|h|minutos|minuto|mins|min|segundos|segundo|secs|sec)\\b";

    public static final String TimeFollowedUnit = "^\\s*{TimeUnitRegex}"
            .replace("{TimeUnitRegex}", TimeUnitRegex);

    public static final String TimeNumberCombinedWithUnit = "\\b(?<num>\\d+(\\,\\d*)?)\\s*{TimeUnitRegex}"
            .replace("{TimeUnitRegex}", TimeUnitRegex);

    public static final String DateTimePeriodNumberCombinedWithUnit = "\\b(?<num>\\d+(\\.\\d*)?)\\s*{TimeUnitRegex}"
            .replace("{TimeUnitRegex}", TimeUnitRegex);

    public static final String PeriodTimeOfDayWithDateRegex = "\\b((e|[àa]|em|na|no|ao|pel[ao]|de)\\s+)?(?<timeOfDay>manh[ãa]|madrugada|(passado\\s+(o\\s+)?)?meio\\s+dia|tarde|noite)\\b";

    public static final String RelativeTimeUnitRegex = "({PastRegex}|{FutureRegex})\\s+{UnitRegex}|{UnitRegex}\\s+({PastRegex}|{FutureRegex})"
            .replace("{PastRegex}", PastRegex)
            .replace("{FutureRegex}", FutureRegex)
            .replace("{UnitRegex}", UnitRegex);

    public static final String SuffixAndRegex = "(?<suffix>\\s*(e)\\s+(?<suffix_num>meia|(um\\s+)?quarto))";

    public static final String FollowedUnit = "^\\s*{UnitRegex}"
            .replace("{UnitRegex}", UnitRegex);

    public static final String LessThanRegex = "^[.]";

    public static final String MoreThanRegex = "^[.]";

    public static final String DurationNumberCombinedWithUnit = "\\b(?<num>\\d+(\\,\\d*)?){UnitRegex}"
            .replace("{UnitRegex}", UnitRegex);

    public static final String AnUnitRegex = "\\b(um(a)?)\\s+{UnitRegex}"
            .replace("{UnitRegex}", UnitRegex);

    public static final String DuringRegex = "^[.]";

    public static final String AllRegex = "\\b(?<all>tod[oa]?\\s+(o|a)\\s+(?<unit>ano|m[êe]s|semana|dia))\\b";

    public static final String HalfRegex = "\\b(?<half>mei[oa]\\s+(?<unit>ano|m[êe]s|semana|dia|hora))\\b";

    public static final String ConjunctionRegex = "^[.]";

    public static final String InexactNumberRegex = "\\b(poucos|pouco|algum|alguns|v[áa]rios)\\b";

    public static final String InexactNumberUnitRegex = "\\b(poucos|pouco|algum|alguns|v[áa]rios)\\s+{UnitRegex}"
            .replace("{UnitRegex}", UnitRegex);

    public static final String HolidayRegex1 = "\\b(?<holiday>sexta-feira santa|sexta-feira da paix[ãa]o|quarta-feira de cinzas|carnaval|dia (de|de los) presidentes?|ano novo chin[eê]s|ano novo|v[ée]spera de ano novo|natal|v[ée]spera de natal|dia de a[cç][ãa]o de gra[çc]as|a[cç][ãa]o de gra[çc]as|yuandan|halloween|dia das bruxas|p[áa]scoa)(\\s+(d[eo]?\\s+)?({FullYearRegex}|(?<order>(pr[oó]xim[oa]?|[nd]?es[st][ea]|[uú]ltim[oa]?|em))\\s+ano))?\\b"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String HolidayRegex2 = "\\b(?<holiday>(dia( d[eoa]s?)? )?(martin luther king|todos os santos|trabalho|s[ãa]o (patr[íi]cio|francisco|jorge|jo[ãa]o)|independ[êe]ncia|trabalhador|trabalho))(\\s+(d[eo]?\\s+)?({FullYearRegex}|(?<order>(pr[oó]xim[oa]?|[nd]?es[st][ea]|[uú]ltim[oa]?|em))\\s+ano))?\\b"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String HolidayRegex3 = "\\b(?<holiday>(dia( d[eoa]s?)? )(trabalhador|trabalhadores|trabalho|m[ãa]es?|pais?|mulher(es)?|crian[çc]as?|marmota|professor|professores))(\\s+(d[eo]?\\s+)?({FullYearRegex}|(?<order>(pr[oó]xim[oa]?|[nd]?es[st][ea]|[uú]ltim[oa]?|em))\\s+ano))?\\b"
            .replace("{FullYearRegex}", FullYearRegex);

    public static final String BeforeRegex = "(antes(\\s+(de|dos?|das?)?)?)";

    public static final String AfterRegex = "((depois|ap[óo]s)(\\s*(de|d?os?|d?as?)?)?)";

    public static final String SinceRegex = "(desde(\\s+(as?|o))?)";

    public static final String PeriodicRegex = "\\b(?<periodic>di[áa]ri[ao]|diariamente|mensalmente|semanalmente|quinzenalmente|anualmente)\\b";

    public static final String EachExpression = "cada|tod[oa]s?\\s*([oa]s)?";

    public static final String EachUnitRegex = "(?<each>({EachExpression})\\s*{UnitRegex})"
            .replace("{EachExpression}", EachExpression)
            .replace("{UnitRegex}", UnitRegex);

    public static final String EachPrefixRegex = "(?<each>({EachExpression})\\s*$)"
            .replace("{EachExpression}", EachExpression);

    public static final String EachDayRegex = "\\s*({EachExpression})\\s*dias\\s*\\b"
            .replace("{EachExpression}", EachExpression);

    public static final String BeforeEachDayRegex = "({EachExpression})\\s*dias(\\s+(as|ao))?\\s*\\b"
            .replace("{EachExpression}", EachExpression);

    public static final String SetEachRegex = "(?<each>({EachExpression})\\s*)"
            .replace("{EachExpression}", EachExpression);

    public static final String LaterEarlyPeriodRegex = "^[.]";

    public static final String WeekWithWeekDayRangeRegex = "^[.]";

    public static final String GeneralEndingRegex = "^[.]";

    public static final String MiddlePauseRegex = "^[.]";

    public static final String PrefixArticleRegex = "^[\\.]";

    public static final String OrRegex = "^[.]";

    public static final String YearPlusNumberRegex = "^[.]";

    public static final String NumberAsTimeRegex = "^[.]";

    public static final String TimeBeforeAfterRegex = "^[.]";

    public static final String DateNumberConnectorRegex = "^[.]";

    public static final String ComplexDatePeriodRegex = "^[.]";

    public static final String AgoRegex = "\\b(antes|atr[áa]s|no passado)\\b";

    public static final String LaterRegex = "\\b(depois d[eoa]s?|ap[óo]s (as)?|desde (as|o)|desde|no futuro|mais tarde)\\b";

    public static final String Tomorrow = "amanh[ãa]";

    public static final Map<String, String> UnitMap = ImmutableMap.<String, String>builder()
        .put("anos", "Y")
        .put("ano", "Y")
        .put("meses", "MON")
        .put("mes", "MON")
        .put("mês", "MON")
        .put("semanas", "W")
        .put("semana", "W")
        .put("dias", "D")
        .put("dia", "D")
        .put("horas", "H")
        .put("hora", "H")
        .put("hrs", "H")
        .put("hr", "H")
        .put("h", "H")
        .put("minutos", "M")
        .put("minuto", "M")
        .put("mins", "M")
        .put("min", "M")
        .put("segundos", "S")
        .put("segundo", "S")
        .put("segs", "S")
        .put("seg", "S")
        .build();

    public static final Map<String, Long> UnitValueMap = ImmutableMap.<String, Long>builder()
        .put("anos", 31536000L)
        .put("ano", 31536000L)
        .put("meses", 2592000L)
        .put("mes", 2592000L)
        .put("mês", 2592000L)
        .put("semanas", 604800L)
        .put("semana", 604800L)
        .put("dias", 86400L)
        .put("dia", 86400L)
        .put("horas", 3600L)
        .put("hora", 3600L)
        .put("hrs", 3600L)
        .put("hr", 3600L)
        .put("h", 3600L)
        .put("minutos", 60L)
        .put("minuto", 60L)
        .put("mins", 60L)
        .put("min", 60L)
        .put("segundos", 1L)
        .put("segundo", 1L)
        .put("segs", 1L)
        .put("seg", 1L)
        .build();

    public static final Map<String, String> SeasonMap = ImmutableMap.<String, String>builder()
        .put("primavera", "SP")
        .put("verao", "SU")
        .put("verão", "SU")
        .put("outono", "FA")
        .put("inverno", "WI")
        .build();

    public static final Map<String, Long> SeasonValueMap = ImmutableMap.<String, Long>builder()
        .put("SP", 3L)
        .put("SU", 6L)
        .put("FA", 9L)
        .put("WI", 12L)
        .build();

    public static final Map<String, Long> CardinalMap = ImmutableMap.<String, Long>builder()
        .put("primeiro", 1L)
        .put("primeira", 1L)
        .put("1o", 1L)
        .put("1a", 1L)
        .put("segundo", 2L)
        .put("segunda", 2L)
        .put("2o", 2L)
        .put("2a", 2L)
        .put("terceiro", 3L)
        .put("terceira", 3L)
        .put("3o", 3L)
        .put("3a", 3L)
        .put("cuarto", 4L)
        .put("quarto", 4L)
        .put("cuarta", 4L)
        .put("quarta", 4L)
        .put("4o", 4L)
        .put("4a", 4L)
        .put("quinto", 5L)
        .put("quinta", 5L)
        .put("5o", 5L)
        .put("5a", 5L)
        .build();

    public static final Map<String, Long> DayOfWeek = ImmutableMap.<String, Long>builder()
        .put("segunda-feira", 1L)
        .put("segundas-feiras", 1L)
        .put("segunda", 1L)
        .put("segundas", 1L)
        .put("terça-feira", 2L)
        .put("terças-feiras", 2L)
        .put("terça", 2L)
        .put("terças", 2L)
        .put("terca-feira", 2L)
        .put("tercas-feiras", 2L)
        .put("terca", 2L)
        .put("tercas", 2L)
        .put("quarta-feira", 3L)
        .put("quartas-feiras", 3L)
        .put("quarta", 3L)
        .put("quartas", 3L)
        .put("quinta-feira", 4L)
        .put("quintas-feiras", 4L)
        .put("quinta", 4L)
        .put("quintas", 4L)
        .put("sexta-feira", 5L)
        .put("sextas-feiras", 5L)
        .put("sexta", 5L)
        .put("sextas", 5L)
        .put("sabado", 6L)
        .put("sabados", 6L)
        .put("sábado", 6L)
        .put("sábados", 6L)
        .put("domingo", 0L)
        .put("domingos", 0L)
        .put("seg", 1L)
        .put("2a", 1L)
        .put("ter", 2L)
        .put("3a", 2L)
        .put("qua", 3L)
        .put("4a", 3L)
        .put("qui", 4L)
        .put("5a", 4L)
        .put("sex", 5L)
        .put("6a", 5L)
        .put("sab", 6L)
        .put("dom", 0L)
        .build();

    public static final Map<String, Long> MonthOfYear = ImmutableMap.<String, Long>builder()
        .put("janeiro", 1L)
        .put("fevereiro", 2L)
        .put("março", 3L)
        .put("marco", 3L)
        .put("abril", 4L)
        .put("maio", 5L)
        .put("junho", 6L)
        .put("julho", 7L)
        .put("agosto", 8L)
        .put("septembro", 9L)
        .put("setembro", 9L)
        .put("outubro", 10L)
        .put("novembro", 11L)
        .put("dezembro", 12L)
        .put("jan", 1L)
        .put("fev", 2L)
        .put("mar", 3L)
        .put("abr", 4L)
        .put("mai", 5L)
        .put("jun", 6L)
        .put("jul", 7L)
        .put("ago", 8L)
        .put("sept", 9L)
        .put("set", 9L)
        .put("out", 10L)
        .put("nov", 11L)
        .put("dez", 12L)
        .put("1", 1L)
        .put("2", 2L)
        .put("3", 3L)
        .put("4", 4L)
        .put("5", 5L)
        .put("6", 6L)
        .put("7", 7L)
        .put("8", 8L)
        .put("9", 9L)
        .put("10", 10L)
        .put("11", 11L)
        .put("12", 12L)
        .put("01", 1L)
        .put("02", 2L)
        .put("03", 3L)
        .put("04", 4L)
        .put("05", 5L)
        .put("06", 6L)
        .put("07", 7L)
        .put("08", 8L)
        .put("09", 9L)
        .build();

    public static final Map<String, Long> Numbers = ImmutableMap.<String, Long>builder()
        .put("zero", 0L)
        .put("um", 1L)
        .put("uma", 1L)
        .put("dois", 2L)
        .put("tres", 3L)
        .put("três", 3L)
        .put("quatro", 4L)
        .put("cinco", 5L)
        .put("seis", 6L)
        .put("sete", 7L)
        .put("oito", 8L)
        .put("nove", 9L)
        .put("dez", 10L)
        .put("onze", 11L)
        .put("doze", 12L)
        .put("dezena", 12L)
        .put("dezenas", 12L)
        .put("treze", 13L)
        .put("catorze", 14L)
        .put("quatorze", 14L)
        .put("quinze", 15L)
        .put("dezesseis", 16L)
        .put("dezasseis", 16L)
        .put("dezessete", 17L)
        .put("dezassete", 17L)
        .put("dezoito", 18L)
        .put("dezenove", 19L)
        .put("dezanove", 19L)
        .put("vinte", 20L)
        .put("vinte e um", 21L)
        .put("vinte e uma", 21L)
        .put("vinte e dois", 22L)
        .put("vinte e duas", 22L)
        .put("vinte e tres", 23L)
        .put("vinte e três", 23L)
        .put("vinte e quatro", 24L)
        .put("vinte e cinco", 25L)
        .put("vinte e seis", 26L)
        .put("vinte e sete", 27L)
        .put("vinte e oito", 28L)
        .put("vinte e nove", 29L)
        .put("trinta", 30L)
        .build();

    public static final Map<String, String[]> HolidayNames = ImmutableMap.<String, String[]>builder()
        .put("pai", new String[]{"diadopai", "diadospais"})
        .put("mae", new String[]{"diadamae", "diadasmaes"})
        .put("acaodegracas", new String[]{"diadegracas", "diadeacaodegracas", "acaodegracas"})
        .put("trabalho", new String[]{"diadotrabalho", "diadotrabalhador", "diadostrabalhadores"})
        .put("pascoa", new String[]{"diadepascoa", "pascoa"})
        .put("natal", new String[]{"natal", "diadenatal"})
        .put("vesperadenatal", new String[]{"vesperadenatal"})
        .put("anonovo", new String[]{"anonovo", "diadeanonovo", "diadoanonovo"})
        .put("vesperadeanonovo", new String[]{"vesperadeanonovo", "vesperadoanonovo"})
        .put("yuandan", new String[]{"yuandan"})
        .put("todosossantos", new String[]{"todosossantos"})
        .put("professor", new String[]{"diadoprofessor", "diadosprofessores"})
        .put("crianca", new String[]{"diadacrianca", "diadascriancas"})
        .put("mulher", new String[]{"diadamulher"})
        .build();

    public static final Map<String, String> VariableHolidaysTimexDictionary = ImmutableMap.<String, String>builder()
        .put("pai", "-06-WXX-7-3")
        .put("mae", "-05-WXX-7-2")
        .put("acaodegracas", "-11-WXX-4-4")
        .put("trabalho", "-05-WXX-1-1")
        .put("memoria", "-03-WXX-2-4")
        .build();

    public static final Map<String, Double> DoubleNumbers = ImmutableMap.<String, Double>builder()
        .put("metade", 0.5D)
        .put("quarto", 0.25D)
        .build();

    public static final String DateTokenPrefix = "em ";

    public static final String TimeTokenPrefix = "as ";

    public static final String TokenBeforeDate = "o ";

    public static final String TokenBeforeTime = "as ";

    public static final String NextPrefixRegex = "(pr[oó]xim[oa]|seguinte)\\b";

    public static final String PastPrefixRegex = "([uú]ltim[oa])\\b";

    public static final String ThisPrefixRegex = "([nd]?es[st][ea])\\b";

    public static final String RelativeDayRegex = "^[\\.]";

    public static final String RestOfDateRegex = "^[\\.]";

    public static final String RelativeDurationUnitRegex = "^[\\.]";

    public static final String ReferenceDatePeriodRegex = "^[.]";

    public static final String FromToRegex = "\\b(from).+(to)\\b.+";

    public static final String SingleAmbiguousMonthRegex = "^(the\\s+)?(may|march)$";

    public static final String UnspecificDatePeriodRegex = "^[.]";

    public static final String PrepositionSuffixRegex = "\\b(on|in|at|around|from|to)$";

    public static final String RestOfDateTimeRegex = "^[\\.]";

    public static final String SetWeekDayRegex = "^[\\.]";

    public static final String NightRegex = "\\b(meia noite|noite|de noite)\\b";

    public static final String CommonDatePrefixRegex = "\\b(dia)\\s+$";

    public static final String DurationUnitRegex = "^[\\.]";

    public static final String DurationConnectorRegex = "^[.]";

    public static final String CenturyRegex = "^[.]";

    public static final String DecadeRegex = "^[.]";

    public static final String DecadeWithCenturyRegex = "^[.]";

    public static final String RelativeDecadeRegex = "^[.]";

    public static final String FullTextYearRegex = "^[\\*]";

    public static final String YearSuffix = "(,?\\s*({YearRegex}|{FullTextYearRegex}))"
            .replace("{YearRegex}", YearRegex)
            .replace("{FullTextYearRegex}", FullTextYearRegex);

    public static final String YearAfterRegex = "^[.]";

    public static final String YearPeriodRegex = "^[.]";

    public static final String FutureSuffixRegex = "^[.]";

    public static final Map<String, Long> WrittenDecades = ImmutableMap.<String, Long>builder()
        .put("", 0L)
        .build();

    public static final Map<String, Long> SpecialDecadeCases = ImmutableMap.<String, Long>builder()
        .put("", 0L)
        .build();

    public static final String DefaultLanguageFallback = "DMY";

    public static final List<String> DurationDateRestrictions = Arrays.asList();
}
